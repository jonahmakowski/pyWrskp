stages:
 - format
 - build
 - docs
 - distribute
 - commit

python_black:
  image: python:alpine
  stage: format
  before_script:
    - pip install black
  script:
    - black . || echo "Black formatting failed but continuing..."

docker_build:
  stage: build
  only:
    - main
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ''
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  script:
    - |
      echo "Waiting for docker daemon on tcp://docker:2375..."
      apk add --no-cache docker-cli # Add docker client if needed in docker:latest
      timeout 60 sh -c 'while ! docker info > /dev/null 2>&1; do echo -n "."; sleep 1; done;' # Increased timeout
      echo "Docker daemon is ready!"
    - echo "Checking Dockerfiles for changes..."
    - |
      find . -type f -name Dockerfile | while read dockerfile; do
        dir_path=$(dirname $dockerfile)
        dockername_file="$dir_path/DOCKERNAME.txt"
        
        if [ -f "$dockername_file" ]; then
          dockername=$(cat "$dockername_file")
          echo "Using Docker name: $dockername for directory: $dir_path"
          
          echo "Changing to directory: $dir_path"
          cd "$dir_path"
          
          if docker build --no-cache -q . > /dev/null; then
            echo "No changes detected in $dir_path"
          else
            echo "Changes detected in $dir_path, building..."
            docker build -t "$CI_REGISTRY/${CI_PROJECT_PATH,,}/$dockername" .
            docker push "$CI_REGISTRY/${CI_PROJECT_PATH,,}/$dockername"
          fi
          
          cd -
        else
          echo "Error: DOCKERNAME.txt not found in $dir_path"
        fi
      done

github_commit:
  image: alpine:latest
  stage: distribute
  variables:
    GIT_DEPTH: 0
  script:
    - apk add git tar ca-certificates
    - update-ca-certificates
    - mkdir -p build/copy_for_github
    - tar --exclude='build' -cf - -C . . | tar -xf - -C build/copy_for_github
    - cd build/copy_for_github
    - git config user.name "GitLab CI"
    - git config user.email "jonah@makowski.ca"
    - git checkout main
    - git remote add gitlab "http://gitlab_ci_token:${DOCS_KEY}@192.168.86.4:8929/jonahmakowski/pyWrskp.git"
    - git remote set-url origin "https://jonahmakowski:$GITHUB_PASSWORD@github.com/jonahmakowski/pyWrskp.git"
    - git pull gitlab main
    - git config pull.rebase false
    - git pull origin
    - git push

build_package:
  image: python:alpine
  stage: build
  variables:
    TWINE_USERNAME: gitlab-ci-token
    TWINE_PASSWORD: $CI_JOB_TOKEN
  script:
    - cd src/helpfulPackage
    - pip install --upgrade pip
    - pip install setuptools wheel
    - python setup.py bdist_wheel sdist
    - pip install .[dev]
    - twine check dist/*
    - twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
  rules:
    - changes:
      - src/helpfulPackage/setup.py
  artifacts:
    paths:
      - src/helpfulPackage/dist
    expire_in: 1 day

generate_docs:
  image: python:alpine
  stage: docs
  variables:
    GIT_DEPTH: 0
  before_script:
    - pip install openai
    - pip install --upgrade pyWrkspPackage --trusted-host 192.168.86.4 --index-url http://192.168.86.4:8929/api/v4/projects/4/packages/pypi/simple
    - apk add git
  script:
    - export API_KEY=${AI_API_KEY}
    - git config --global user.email "gitlab-ci@localhost"
    - git config --global user.name "GitLab CI"
    - git checkout main
    - git remote set-url origin "http://gitlab_ci_token:${DOCS_KEY}@192.168.86.4:8929/jonahmakowski/pyWrskp.git"
    - git pull
    - python src/docGeneration/generate.py  # Runs AI-powered doc generation
  rules:
    - changes:
        - "**/*.py"  # Runs only when Python files change
        - "**/*.gd" # Or godot script
  
commit:
  image: alpine:latest
  stage: commit
  script:
    - echo "Committing changes to GitLab..."
    - apk add --no-cache git
    - git config --global user.email "gitlab-ci@localhost"
    - git config --global user.name "GitLab CI"
    - git checkout main
    - git remote set-url origin "http://gitlab_ci_token:${DOCS_KEY}@192.168.86.4:8929/jonahmakowski/pyWrskp.git"
    - rm -r build/ || echo "No build directory to remove"
    - git add .
    - |
      # Check if there are any changes
      if ! git diff --cached --quiet; then
        git pull
        git commit -m "ðŸ¤– Auto-generated Modifications for latest changes"
        git push
      else
        echo "No changes to commit."
      fi
  