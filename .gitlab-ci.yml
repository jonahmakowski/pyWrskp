stages:
 - distribute
 - docs

include:
  - local: src/automatic1111Docker/.gitlab-ci.yml

services:
  - name: docker:dind
    alias: docker

github_commit:
  image: alpine:latest
  stage: distribute
  variables:
    GIT_DEPTH: 0
  script:
    - apk add git tar ca-certificates
    - update-ca-certificates
    - mkdir -p build/copy_for_github
    - tar --exclude='build' -cf - -C . . | tar -xf - -C build/copy_for_github
    - cd build/copy_for_github
    - git config user.name "GitLab CI"
    - git config user.email "jonah@makowski.ca"
    - git checkout main
    - git remote add gitlab "http://gitlab_ci_token:${DOCS_KEY}@192.168.86.4:8929/jonahmakowski/pyWrskp.git"
    - git remote set-url origin "https://jonahmakowski:$GITHUB_PASSWORD@github.com/jonahmakowski/pyWrskp.git"
    - git pull gitlab main
    - git config pull.rebase false
    - git pull origin
    - git push

build_package:
  image: python:alpine
  stage: distribute
  variables:
    TWINE_USERNAME: gitlab-ci-token
    TWINE_PASSWORD: $CI_JOB_TOKEN
  script:
    - cd src/helpfulPackage
    - pip install --upgrade pip
    - pip install setuptools wheel
    - python setup.py bdist_wheel sdist
    - pip install .[dev]
    - twine check dist/*
    - twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
  rules:
    - changes:
      - src/helpfulPackage/setup.py
  artifacts:
    paths:
      - src/helpfulPackage/dist
    expire_in: 1 day

generate_docs:
  image: python:alpine
  stage: docs
  variables:
    GIT_DEPTH: 0
  before_script:
    - pip install openai
    - pip install --upgrade pyWrkspPackage --trusted-host 192.168.86.4 --index-url http://192.168.86.4:8929/api/v4/projects/4/packages/pypi/simple
    - apk add git
  script:
    - export API_KEY=${AI_API_KEY}
    - git config --global user.email "gitlab-ci@localhost"
    - git config --global user.name "GitLab CI Docs Bot"
    - git checkout main
    - git remote set-url origin "http://gitlab_ci_token:${DOCS_KEY}@192.168.86.4:8929/jonahmakowski/pyWrskp.git"
    - git pull
    - python src/docGeneration/generate.py  # Runs AI-powered doc generation
    - git add docs/
    - |
      # Check if there are any changes
      if ! git diff --cached --quiet; then
        git pull
        git commit -m "ðŸ¤– Auto-generate docs for latest changes"
        git push
      else
        echo "No changes to commit."
      fi
  rules:
    - changes:
        - "**/*.py"  # Runs only when Python files change

.docker_build_template: &docker_build_definition # YAML anchor for re-use
  stage: distribute # Default stage, can be overridden
  script:
    - |
      echo "Waiting for docker daemon..."
      timeout 30 sh -c 'while ! docker info > /dev/null 2>&1; do echo -n "."; sleep 1; done;'
      echo "Docker daemon is ready!"
    - docker info
    - echo "Logging in to GitLab Container Registry: $CI_REGISTRY_HOST"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY_HOST
    # IMAGE_NAME and DOCKERFILE_PATH must be defined in the job using this template
    - echo "Building Docker image $IMAGE_NAME from $DOCKERFILE_PATH"
    - docker build -t $IMAGE_NAME:latest --file $DOCKERFILE_PATH .
    - docker tag $IMAGE_NAME:latest $IMAGE_NAME:$CI_COMMIT_SHORT_SHA
    - echo "Pushing image to registry: $IMAGE_NAME"
    - docker push $IMAGE_NAME:latest
    - docker push $IMAGE_NAME:$CI_COMMIT_SHORT_SHA
