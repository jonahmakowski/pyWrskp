diff --git a/src/voiceAssistants/newVoiceAssistant/google_calendar.py b/src/voiceAssistants/newVoiceAssistant/google_calendar.py
index 87fbbab97..6d8668159 100644
--- a/src/voiceAssistants/newVoiceAssistant/google_calendar.py
+++ b/src/voiceAssistants/newVoiceAssistant/google_calendar.py
@@ -11,13 +11,14 @@ from os import getenv
 from pyWrkspPackage import ai_response
 
 load_dotenv()
-AI_KEY = getenv('AI_TOKEN')
-AI_MODEL = getenv('AI_MODEL')
-AI_URL = getenv('AI_URL')
+AI_KEY = getenv("AI_TOKEN")
+AI_MODEL = getenv("AI_MODEL")
+AI_URL = getenv("AI_URL")
 
 # If modifying these scopes, delete the file token.json.
 SCOPES = ["https://www.googleapis.com/auth/calendar"]
 
+
 def get_credentials() -> Credentials:
     """
     Obtains Google API credentials for the user.
@@ -31,7 +32,7 @@ def get_credentials() -> Credentials:
         Credentials: An authorized Google API credentials object.
 
     Raises:
-        FileNotFoundError: If the required client secrets file 
+        FileNotFoundError: If the required client secrets file
                            (".secret-credentials.json") is not found.
 
     Notes:
@@ -82,7 +83,9 @@ def get_events(amount: int) -> tuple[list, str]:
         service = build("calendar", "v3", credentials=creds)
 
         # Call the Calendar API
-        now = datetime.datetime.now(datetime.timezone.utc).isoformat()  # 'Z' indicates UTC time
+        now = datetime.datetime.now(
+            datetime.timezone.utc
+        ).isoformat()  # 'Z' indicates UTC time
         events_result = (
             service.events()
             .list(
@@ -104,13 +107,21 @@ def get_events(amount: int) -> tuple[list, str]:
         output = []
         out_str = ""
         for index, event in enumerate(events):
-            start = date_parser(event["start"].get("dateTime", event["start"].get("date")))
+            start = date_parser(
+                event["start"].get("dateTime", event["start"].get("date"))
+            )
             end = date_parser(event["end"].get("dateTime", event["start"].get("date")))
-            location = event['location'].replace('\n', ' ') if 'location' in event.keys() else None
-            title = event['summary']
-            output.append({'title': title, 'location': location, 'start': start, 'end': end})
+            location = (
+                event["location"].replace("\n", " ")
+                if "location" in event.keys()
+                else None
+            )
+            title = event["summary"]
+            output.append(
+                {"title": title, "location": location, "start": start, "end": end}
+            )
             out_str += f"{index + 1}.\t{start.strftime('%d/%m/%Y, %H:%M')} - {end.strftime('%d/%m/%Y, %H:%M')} -- {title} at {location}"
-        
+
         return output, out_str
 
     except HttpError as error:
@@ -123,49 +134,46 @@ def make_event(start: str, end: str, title: str) -> None:
     Creates a new event in the user's primary Google Calendar.
 
     Args:
-        start (str): The start date and time of the event in ISO 8601 format 
+        start (str): The start date and time of the event in ISO 8601 format
                      (e.g., '2023-03-15T10:00:00').
-        end (str): The end date and time of the event in ISO 8601 format 
+        end (str): The end date and time of the event in ISO 8601 format
                    (e.g., '2023-03-15T11:00:00').
         title (str): The title or summary of the event.
 
     Returns:
-        None: The function does not return a value but inserts the event into 
+        None: The function does not return a value but inserts the event into
               the user's Google Calendar.
 
     Raises:
-        google.auth.exceptions.GoogleAuthError: If there is an issue with 
+        google.auth.exceptions.GoogleAuthError: If there is an issue with
                                                 authentication.
-        googleapiclient.errors.HttpError: If there is an error with the 
+        googleapiclient.errors.HttpError: If there is an error with the
                                           Google Calendar API request.
 
     Note:
-        Ensure that the `get_credentials` function is implemented to provide 
-        valid Google API credentials, and the `googleapiclient.discovery.build` 
+        Ensure that the `get_credentials` function is implemented to provide
+        valid Google API credentials, and the `googleapiclient.discovery.build`
         function is available for creating the Calendar API service.
     """
     creds = get_credentials()
     service = build("calendar", "v3", credentials=creds)
-    service.events().insert(calendarId='primary', body={
-        'summary': title,
-        'start': {
-            'dateTime': start,
-            'timeZone': 'America/Toronto'
+    service.events().insert(
+        calendarId="primary",
+        body={
+            "summary": title,
+            "start": {"dateTime": start, "timeZone": "America/Toronto"},
+            "end": {"dateTime": end, "timeZone": "America/Toronto"},
         },
-        'end': {
-            'dateTime': end,
-            'timeZone': 'America/Toronto'
-        }
-    }).execute()
+    ).execute()
 
 
 def do_make_event(prompt: str) -> bool:
     """
     Creates a calendar event based on the user's prompt.
 
-    This function interacts with an AI model to extract the event title, start time, 
-    and end time from the user's input. It also retrieves the user's next five events 
-    to provide context for relative time parsing. The event is then created in the 
+    This function interacts with an AI model to extract the event title, start time,
+    and end time from the user's input. It also retrieves the user's next five events
+    to provide context for relative time parsing. The event is then created in the
     user's calendar.
 
     Args:
@@ -175,7 +183,7 @@ def do_make_event(prompt: str) -> bool:
         bool: True if the event was successfully created, False otherwise.
 
     Raises:
-        Exception: If an error occurs during the event creation process, it is caught 
+        Exception: If an error occurs during the event creation process, it is caught
         and logged, and the function returns False.
     """
     try:
@@ -186,9 +194,35 @@ def do_make_event(prompt: str) -> bool:
 
         events = get_events(10)[0]
 
-        title = ai_response([{"role": "system", "content": title_prompt}, {"role": "user", "content": prompt}], AI_MODEL, AI_URL, AI_KEY)[0]
-        start_time_str = ai_response([{"role": "system", "content": start_time_prompt}, {"role": "user", "content": events}, {"role": "user", "content": prompt}], AI_MODEL, AI_URL, AI_KEY)[0]
-        end_time_str = ai_response([{"role": "system", "content": end_time_prompt}, {"role": "user", "content": events}, {"role": "user", "content": prompt}], AI_MODEL, AI_URL, AI_KEY)[0]
+        title = ai_response(
+            [
+                {"role": "system", "content": title_prompt},
+                {"role": "user", "content": prompt},
+            ],
+            AI_MODEL,
+            AI_URL,
+            AI_KEY,
+        )[0]
+        start_time_str = ai_response(
+            [
+                {"role": "system", "content": start_time_prompt},
+                {"role": "user", "content": events},
+                {"role": "user", "content": prompt},
+            ],
+            AI_MODEL,
+            AI_URL,
+            AI_KEY,
+        )[0]
+        end_time_str = ai_response(
+            [
+                {"role": "system", "content": end_time_prompt},
+                {"role": "user", "content": events},
+                {"role": "user", "content": prompt},
+            ],
+            AI_MODEL,
+            AI_URL,
+            AI_KEY,
+        )[0]
 
         start_time = date_parser(start_time_str)
         end_time = date_parser(end_time_str)
@@ -201,4 +235,6 @@ def do_make_event(prompt: str) -> bool:
 
 
 if __name__ == "__main__":
-    do_make_event("Schedule a meeting with Jonah and the team on Friday at 3 PM for 1 hour") # Example usage
+    do_make_event(
+        "Schedule a meeting with Jonah and the team on Friday at 3 PM for 1 hour"
+    )  # Example usage
diff --git a/src/voiceAssistants/newVoiceAssistant/main.py b/src/voiceAssistants/newVoiceAssistant/main.py
index 64bbc5ba0..d3d0ed314 100644
--- a/src/voiceAssistants/newVoiceAssistant/main.py
+++ b/src/voiceAssistants/newVoiceAssistant/main.py
@@ -14,18 +14,27 @@ from google_calendar import get_events, get_credentials, do_make_event
 
 # General Setup
 load_dotenv()
-AI_KEY = getenv('AI_TOKEN')
-VOICE_KEY = getenv('VOICE_DETECTION_TOKEN')
-AI_MODEL = getenv('AI_MODEL')
-AI_URL = getenv('AI_URL')
-SYS_PROMPT = load_from_file('prompt.md')
+AI_KEY = getenv("AI_TOKEN")
+VOICE_KEY = getenv("VOICE_DETECTION_TOKEN")
+AI_MODEL = getenv("AI_MODEL")
+AI_URL = getenv("AI_URL")
+SYS_PROMPT = load_from_file("prompt.md")
 # Commands dictionary format: {ai_command: [function, requires_arguments, gets_prompt_as_argument]}
-COMMANDS = {'open-app': [actions.open_app, True], 'search-the-web': [actions.search, True],
-            'open-file': [actions.open_file, True], 'spotify': [spotify.do_spotify, True, True], 'open-webpage': [actions.open_webpage, True],
-            'open-folder': [actions.open_directory_in_finder, True], 'hide-application': [actions.hide_app, True],
-            'question-mode': ['Question Mode', False], 'clipboard-contents': [paste, False], 'terminate': [actions.terminate, False],
-            'quit-application': [actions.quit_app, True], 'make-event': [do_make_event, True, True]}
-USER_NAME = 'Jonah'
+COMMANDS = {
+    "open-app": [actions.open_app, True],
+    "search-the-web": [actions.search, True],
+    "open-file": [actions.open_file, True],
+    "spotify": [spotify.do_spotify, True, True],
+    "open-webpage": [actions.open_webpage, True],
+    "open-folder": [actions.open_directory_in_finder, True],
+    "hide-application": [actions.hide_app, True],
+    "question-mode": ["Question Mode", False],
+    "clipboard-contents": [paste, False],
+    "terminate": [actions.terminate, False],
+    "quit-application": [actions.quit_app, True],
+    "make-event": [do_make_event, True, True],
+}
+USER_NAME = "Jonah"
 
 # Verify google calendar credentials
 get_credentials()
diff --git a/src/voiceAssistants/newVoiceAssistant/spotify.py b/src/voiceAssistants/newVoiceAssistant/spotify.py
index f05355936..b45f216a8 100644
--- a/src/voiceAssistants/newVoiceAssistant/spotify.py
+++ b/src/voiceAssistants/newVoiceAssistant/spotify.py
@@ -42,9 +42,9 @@ except Exception as e:
     print("Please check your .env file and Spotify Developer Dashboard settings.")
     sys.exit(1)
 
-AI_KEY = getenv('AI_TOKEN')
-AI_MODEL = getenv('AI_MODEL')
-AI_URL = getenv('AI_URL')
+AI_KEY = getenv("AI_TOKEN")
+AI_MODEL = getenv("AI_MODEL")
+AI_URL = getenv("AI_URL")
 
 # --- Helper Functions ---
 
@@ -510,6 +510,7 @@ def add_track_to_playlist(track_uri, playlist_name):
     except Exception as e:
         print(f"Track added, but couldn't confirm playlist name. Error: {e}")
 
+
 def do_spotify(prompt: str) -> bool:
     """
     Perform Spotify actions based on the given prompt.
@@ -520,13 +521,25 @@ def do_spotify(prompt: str) -> bool:
     Returns:
         bool: True if the action was performed successfully, False otherwise.
     """
-    messages = [{"role": "system", "content": load_from_file('spotify_prompt.md').format(list_user_playlists(), get_currently_playing()['track_name'] if get_currently_playing() else 'Nothing is playing right now')},
-                {"role": "user", "content": prompt}]
-    
+    messages = [
+        {
+            "role": "system",
+            "content": load_from_file("spotify_prompt.md").format(
+                list_user_playlists(),
+                (
+                    get_currently_playing()["track_name"]
+                    if get_currently_playing()
+                    else "Nothing is playing right now"
+                ),
+            ),
+        },
+        {"role": "user", "content": prompt},
+    ]
+
     response, _ = ai_response(messages, AI_MODEL, AI_URL, AI_KEY)
     if response is None:
         return False
-    
+
     device = get_active_device()
     if device is None:
         play()
@@ -540,14 +553,14 @@ def do_spotify(prompt: str) -> bool:
     if "stop-playback" in response:
         stop_playback(device)
     elif "like-song" in response:
-        like_song(get_currently_playing()['track_id'])
+        like_song(get_currently_playing()["track_id"])
     elif "play-song" in response:
-        uri, _ = find_track(response.split('play-song')[1].strip())
+        uri, _ = find_track(response.split("play-song")[1].strip())
         play_item(uri, device)
     elif "playlistadd" in response:
-        playlist_name = response.split('playlistadd')[1].strip()
-        song_uri = get_currently_playing()['track_uri']
+        playlist_name = response.split("playlistadd")[1].strip()
+        song_uri = get_currently_playing()["track_uri"]
         add_track_to_playlist(song_uri, playlist_name)
     elif "playlist" in response:
-        uri, _ = find_playlist_fuzzy(response.split('playlist')[1].strip())
+        uri, _ = find_playlist_fuzzy(response.split("playlist")[1].strip())
         play_item(uri, device)
